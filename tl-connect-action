#!/usr/bin/env perl
use 5.010;

use Getopt::Long 2.25 qw(:config posix_default no_ignore_case);
use Pod::Usage 1.14;

my %opt = (
        interval => 5,
        rc => "$ENV{HOME}/.tl-connect-rc"
);

# main loop
sub main()
{
    # parse options
    GetOptions(\%opt, 'help|h', 'man', 'noaction|no-action|n',
        'verbose|v', 'interval|i=i', 'rc|r=s') or exit(1);
    if($opt{help})     { pod2usage(1) }
    if($opt{man})      { pod2usage(-exitstatus => 0, -verbose => 2) }
    $opt{verbose} = 1 if $opt{noaction};
    my $lastIp;

    if (not $opt{verbose}){
        # lets daemonize ourselves
        open STDOUT, '>',$ENV{HOME}.'/tl-connect-action.log'
           or die "Could not open logger output: $!\n";
        open STDERR, '>&STDOUT'
           or die "Could redirect STDERR:$!\n";
        $SIG{CHLD} = 'IGNORE';
        exit if fork;
        exit if fork;
    }

    print STDERR "## waiting for client_ip change\n" if $opt{verbose};

    while (1){
        sleep $opt{interval};
        my $ip = (`/opt/thinlinc/bin/tl-session-param /client_ip` =~ /(\S+)/);
        next if $ip ~~ $lastIp;
        print STDERR "## found new ip: $ip\n" if $opt{verbose};
        $lastIp = $ip;
        if ( -x $opt{rc}){
             $ENV{TL_CLIENT_IP} = $ip;
             if ($opt{verbose}){
                print "## runninng $opt{rc}\n";
             }
             system $opt{rc} unless $opt{noaction};
        }
    }    
}

main;

__END__

=head1 NAME

tl-connect-action - run a script when a tl session connects to a terminal

=head1 SYNOPSIS

B<tl-connect-action> [I<options>...]

     --man           show man-page and exit
 -h, --help          display this help and exit
     --noaction      just talk don't act
     --verbose       talk while working
     --rc=file       script to run upon connect (~/.tl-connect-rc)
     --interval=i    interval to poll for ip change
     
=head1 DESCRIPTION

Run a script when a ThinLinc session is connected to a terminal.
In the script you can use the $TL_CLIENT_IP environment variable to
determine the ip address of your thin client and take appropriate action.

C<--noaction> and C<--verbose> mode, the program will run in foreground,
otherwhise it will run as a daemon. The script polls the output of
C<tl-session-param /client_ip> to determine changes in the client ip
addresse.

=head1 BUGS

The script only detects connect events, not disconnect events.

=head1 COPYRIGHT

Copyright (c) 2012 by OETIKER+PARTNER AG. All rights reserved.

=head1 LICENSE

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

=head1 AUTHOR

S<Tobias Oetiker E<lt>tobi@oetiker.chE<gt>>

=head1 HISTORY

 2012-08-15 to Initial Version

=cut

# Emacs Configuration
#
# Local Variables:
# mode: cperl
# eval: (cperl-set-style "PerlStyle")
# mode: flyspell
# mode: flyspell-prog
# End:
#
# vi: sw=4 et
